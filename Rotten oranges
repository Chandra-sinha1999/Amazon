class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int> > q;
        int fresh = 0;
        for(int i = 0; i < grid.size(); i++){
            for(int j =0; j< grid[i].size(); j++){
                if(grid[i][j] == 2) q.push(make_pair(i,j));
                if(grid[i][j] == 1) fresh++;
            }
        }
        //now computing
        if(fresh == 0) return 0;
        int row[]={0,1,0,-1};
        int col[]={1,0,-1,0};
        int res = 0;
        while(!q.empty()){
            res++;
            int s = q.size();
            while(s--){
                auto x = q.front();
                q.pop();
                int r = x.first;
                int c = x.second;
                for(int i = 0; i < 4; i++){
                    int m = r + row[i];
                    int n = c + col[i];
                    if(m >= 0 && m < grid.size() && n >= 0 && n < grid[0].size()){
                        if(grid[m][n] == 1){
                            fresh--;
                            grid[m][n] = 2;
                            q.push(make_pair(m,n));
                        }
                    }
                }
            }
            if(fresh == 0) return res;
        }
        return -1;
    }
};
